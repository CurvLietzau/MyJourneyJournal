=== Projektidee CurvLietzau, 2016-04-05 ===
                                           Projekt 1

                                     MyJourneyJournal.com


                                          Produktvision:




Für: jeden der eine tolle Reise macht/ gemacht hat




Ist        MyJourneyJournal.com





Funktion: ->MyJourneyJournal.com ist eine Webanwendung, die dem Reisenden die Möglichkeit 
           bietet eine Reise zu dokumentieren und letztendlich eine Weltkarte erstellt, auf der verschiedene GPS Locations mit den jeweiligen Fotos/ Videos  dargestellt werden.


          ->Die Anwendung kann täglich genutzt werden um eine möglichst präzise Dokumentation der Reise zu erschaffen, kann allerdings auch wöchentlich oder unregelmäßig genutzt werden.

          ->Jeder User registriert sich und kann jede erstellte, dokumentierte Reise mit Freunden teilen.

          ->“Reisen Folders“ können innerhalb von Sekunden erstellt werden und Fotos/ Videos können einfach auf der jeweiligen GPS Location hochgeladen werden.

=== Feedback Alpers, 2016-04-08 ===

Leider haben Sie die Aufgabe nicht verstanden. Es ging hier nicht darum, eine Produktvision oder Präsentation zu entwickeln, sondern darum, die Anteile der Projektidee zusammenzufassen, die sich auf die zu programmierenden Inhalt beziehen.

Außerdem haben Sie zwei wichtige formale Vorgaben ignoriert: Den Namen der Datei und den Speicherort. Das ist für eine Softwareprojekt sehr problematisch.

Sie haben eine URL für das Projekt festgelegt. Besitzen Sie diese URL bereits?

Ziel war es, dass Sie mit kurzen Sätzen beschreiben, was die Anwendung leistet, nicht wie sie von NutzerInnen genutzt werden kann. Ersteres ist Softwareentwicklung, letzteres Produktdesign bzw. Marketing.

Hier einige Beispiele, wie das bei Ihrer Projektidee aussehen würde:
- Die Anwendung bietet NutzerInnen die Möglichkeit GPR-Koordinaten, Texte und Bilder zu speichern.
- Es gibt ein Log-In und eine Registrierung.
- Die hochgeladenene Daten sind erst nach Freigabe für individuelle NutzerInnen verfügbar.

Das führt zum nächsten Nachteil an Ihrer Projektidee: Es gibt keine Interaktion zwischen NutzerInnen und Programm. Vielmehr ist dies eine simple Datenbankanwendung.

Außerdem sollten Sie eine Idee entwickeln, die Sie gerne hätten, also etwas, das es noch nicht gibt. Was Sie beschreiben gibt es aber bereits.

Es gibt jetzt zwei Möglichkeiten: Zum einen können Sie versuchen, mit Bezug auf Reisen eine interaktive Anwendung zu konzipieren, aber denken Sie hier bitte daran, es geht nicht darum, etwas im Sinne des Mediendesigns oder des Marketings zu erstellen, das machen Sie in anderen Veranstaltungen. Hier geht es darum, dass Sie aus der Sicht der Softwareentwicklung konzipieren und das ist etwas ganz anderes. Alternativ dazu können Sie eine Produktidee (entsprechend der Vorgaben aus Kap. 5) für das folgende Brettspiel erstellen: Artefakt http://www.brettspiele-report.de/artefakt/

=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers